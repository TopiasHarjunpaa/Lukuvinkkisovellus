name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: postgres_db
          POSTGRES_PASSWORD: postgres_password
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres_user
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client

      - uses: actions/checkout@v2

      - name: Find schema
        run: cat schema.sql

      - name: Read schema
        run: psql -d postgresql://postgres_user:postgres_password@localhost/postgres_db -f schema.sql
        env:
          PGPASSWORD: postgres_password

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install pip
        run: python -m ensurepip --upgrade

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Create env.test file
        run: |
          touch .env.test
          echo DATABASE_URL=postgresql://postgres_user:postgres_password@localhost/postgres_db >> .env.test
          echo SECRET_KEY=cd658d476cc15a67f687760f2de8b767 >> .env.test
          cat .env.test

          touch .env
          echo DATABASE_URL=postgresql://postgres_user:postgres_password@localhost/postgres_db >> .env
          echo SECRET_KEY=cd658d476cc15a67f687760f2de8b767 >> .env
          cat .env.test
        env:
          PGPASSWORD: postgres_password

      - name: Run tests
        run: poetry run coverage run --branch -m pytest

      - name: Run pylint
        run: poetry run pylint src/

      - name: Coverage report
        run: poetry run coverage xml

      - name: Coverage report to Codecov
        run: |
          curl -s https://codecov.io/bash > .codecov
          chmod +x .codecov
          ./.codecov

      - name: Robot tests
        run: |
          export DISPLAY=:99
          chromedriver --url-base=/wd/hub &
          sudo Xvfb -ac :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &

          poetry run python3 src/index.py &

          # odetetaan, että palvelin on valmiina ottamaan vastaan pyyntöjä
          while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:5000/ping)" != "200" ]];
            do sleep 1;
          done

          export DATABASE_URL=postgresql://postgres_user:postgres_password@localhost/postgres_db
          export SECRET_KEY=cd658d476cc15a67f687760f2de8b767

          # suoritetaan testit
          poetry run robot src/tests

          status=$?

          kill $(lsof -t -i:5000)

          exit $status
        env:
          PGPASSWORD: postgres_password

#      - name: Commit robot report
#        run: |
#          git config --global user.name 'Your Name'
#          git config --global user.email 'your-username@users.noreply.github.com'
#          git add report.html -f
#          git add log.html -f
#          git commit -m "Automated robot test report"
#          git push
   
      - name: Get Repository Owner & Name
        run: |
          export OWNER="$(echo "${{ github.repository }}" | awk -F / '{print $1}' | sed -e "s/:refs//")"
          export REPO="$(echo "${{ github.repository }}" | awk -F / '{print $2}' | sed -e "s/:refs//")"
          echo "REPOSITORY_OWNER=$OWNER" >> $GITHUB_ENV
          echo "REPOSITORY_NAME=$REPO" >> $GITHUB_ENV
      - name: Send report to commit
        uses: joonvena/robotframework-reporter-action@v0.1
        env:
          GH_ACCESS_TOKEN: ${{ secrets.TOKEN }}
          REPO_OWNER: ${{ env.REPOSITORY_OWNER }}
          COMMIT_SHA: ${{ github.sha }}
          REPOSITORY: ${{ env.REPOSITORY_NAME }}
          REPORT_PATH: ${{ github.workspace }}/reports
